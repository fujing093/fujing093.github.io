<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[工厂模式]]></title>
      <url>http://yoursite.com/2017/07/27/Factory-Pattern/</url>
      <content type="html"><![CDATA[<p>最近的任务需要根据配置文件创建不同类的实例，一共两个类，实现相同的接口，用到了工厂模式。<br>本文主要总结简单工厂模式，其他是学习，暂无体验。</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>工厂模式提供了一种创建对象的最佳方式，在创建对象时不会对客户端暴露创建逻辑。</p>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><p>对一些功能近似的类进行抽象，使用统一的接口，但是 new 的时候很麻烦，于是就可以用简单工厂模式。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IProduct</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Send</span>(<span class="params"></span>)</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductA</span> : <span class="title">IProduct</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductB</span> : <span class="title">IProduct</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Factory</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> IProduct <span class="title">Produce</span>(<span class="params"><span class="keyword">string</span> name</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (name.Equals(<span class="string">"A"</span>))</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ProductA();</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params">name.Equals(<span class="string">"B"</span></span>))</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ProductB();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Invalid argument"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><p>简单工厂模式每次添加一个类，都要修改工厂类，违背了<strong>开闭原则</strong>，于是就可以用工厂方法模式<strong>对工厂进行抽象</strong>。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IFactory</span></div><div class="line">&#123;</div><div class="line">    <span class="function">IProduct <span class="title">Produce</span>(<span class="params"></span>)</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FactoryA</span> : <span class="title">IFactory</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> IProduct <span class="title">Produce</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductA();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FactoryB</span> : <span class="title">IFactory</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> IProduct <span class="title">Produce</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProductB();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p>把有一些有联系或者相近的产品，放到一个工厂去生产，没有必要单独再开一个工厂。</p>
<p>抽象工厂模式中的抽象产品可能有一个或者多个，一个抽象产品对应一个产品族。<br>当只有一个产品族时，则为工厂方法模式。</p>
<p>抽象工厂模式容易扩展工厂和产品族。但是如果添加新的产品，则会违反“开闭原则”。</p>
<h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><h3 id="简单工厂模式-1"><a href="#简单工厂模式-1" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><p><img src="/img/factory_simple.jpg" alt="简单工厂模式"></p>
<h3 id="工厂方法模式-1"><a href="#工厂方法模式-1" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><p><img src="/img/factory_method.jpg" alt="工厂方法模式"></p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul>
<li>日志记录器，记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。</li>
<li>设计一个连接服务器的框架，需要三个协议，”POP3”、”IMAP”、”HTTP”，可以把这三个作为产品类，共同实现一个接口。 </li>
</ul>
<h2 id="为什么要用工厂模式"><a href="#为什么要用工厂模式" class="headerlink" title="为什么要用工厂模式"></a>为什么要用工厂模式</h2><p>引用知乎上看到的一句话，我觉得这是很重要的一个原因：</p>
<blockquote>
<p>new XXX其实也是一种硬编码！！！</p>
</blockquote>
<p>使用工厂模式可以把一个接口的实现类统一管理起来，根据需要来生产相应的实现类，由工厂来实现生产的过程，我们使用的时候只需要告诉它想要什么就可以了。</p>
<p>下面是我的心路历程…</p>
<p>实际上我是为了完成开始提到的任务而被迫使用这个东西的。因为如果把主代码复制一遍再用 if-else 来区分，感觉很low。但是作为一只对设计模式一无所知的小白，在mentor告诉我创建一个接口之后我就不知道怎么做了，我不知道应该在什么地方去创建实现类的实例。后来在朋友的指点下才得知工厂模式的大名。</p>
<p>这里还有一个小插曲，其中一个类是系统类，没有办法实现我自己创建的接口，所以在外面包装了一层，继承系统类，然后实现接口。最开始摸索着写，结构很混乱，后来豁然开朗，算是第一次正式接触设计模式，mark。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.runoob.com/design-pattern/factory-pattern.html" target="_blank" rel="external">工厂模式 | 菜鸟教程</a><br><a href="https://www.zhihu.com/question/24843188?sort=created" target="_blank" rel="external">知乎：工厂设计模式有什么用？</a><br><a href="http://blog.maxplus1.com/2017/05/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" target="_blank" rel="external">设计模式</a><br><a href="http://www.runoob.com/design-pattern/factory-pattern.html" target="_blank" rel="external">工厂模式</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SMTP]]></title>
      <url>http://yoursite.com/2017/07/26/SMTP/</url>
      <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>SMTP（Simple Mail Transfer Protocol），简单邮件传输协议，是电子邮件传输的互联网标准，是一种TCP协议支持的提供可靠且有效电子邮件传输的应用层协议。</p>
<ul>
<li><p>SMTP的一个重要特点是能够在传送中接力传送邮件，即邮件可以通过不同网络上的主机接力式传送。</p>
</li>
<li><p>SMTP存在两个端：在发信人的邮件服务器上执行的客户端，和在收信人的邮件服务器上执行的服务器端。每个邮件服务器同时运行客户端和服务端。当一个邮件服务器向其他邮件服务器发送邮件时，它是作为SMTP客户端在运行。通常它工作在两种情况下：一是邮件从客户机传输到服务器；二是从某一个服务器传输到另一个服务器。</p>
</li>
<li><p>SMTP是一个请求/响应协议，它监听25号端口，用于接收用户的Mail请求，并与远端Mail服务器建立SMTP连接。</p>
</li>
<li><p>SMTP是一个“推”的协议，它不允许根据需要从远程服务器上“拉”来消息。要做到这点，邮件客户端必须使用POP3或IMAP。另一个SMTP服务器可以使用ETRN在SMTP上触发一个发送。</p>
</li>
<li><p>发送邮件前先发送RCPT命令而不是直接发送邮件，目的是弄清服务器是否做好接收邮件的准备，然后才发送邮件，避免浪费网络资源，不致于发送了很长的邮件后才发现收件人帐户有问题，例如查无此人、信箱存储空间不够。</p>
</li>
<li><p>浏览器发送邮件，是将用户代理的功能直接放到邮件服务器上去做，邮件服务器发送邮件仍然采用SMTP协议。</p>
</li>
</ul>
<h2 id="SMTP协议工作机制"><a href="#SMTP协议工作机制" class="headerlink" title="SMTP协议工作机制"></a>SMTP协议工作机制</h2><p>SMTP通常有两种工作模式：发送SMTP和接收SMTP。</p>
<p>具体工作方式为：发送SMTP在接收到用户的邮件请求后，判断此邮件是否为本地邮件，若是直接投送到用户的邮箱，否则向DNS查询远端邮件服务器的MX记录，并建立与远端接收SMTP之间的一个双向传送通道，此后SMTP命令由发送SMTP发出，由接收SMTP接收，而应答则反方向传送。一旦传送通道建立，SMTP发送者发送MAIL命令指明邮件发送者。如果SMTP接收者可以接收邮件则返回OK应答。SMTP发送者再发出RCPT命令确认邮件是否接收到。如果SMTP接收者接收，则返回OK应答；如果不能接收到，则发出拒绝接收应答（但不中止整个邮件操作），双方将如此反复多次。当接收者收到全部邮件后会接收到特别的序列，如果接收者成功处理了邮件，则返回OK应答。</p>
<h2 id="SmtpClient-DeliveryMethod-C"><a href="#SmtpClient-DeliveryMethod-C" class="headerlink" title="SmtpClient.DeliveryMethod (C#)"></a>SmtpClient.DeliveryMethod (C#)</h2><p>C#中SmtpClient有三种传输方式：</p>
<table>
<thead>
<tr>
<th style="text-align:left">传输方式</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Network</td>
<td style="text-align:left">Email 通过网络传输到一个SMTP服务器</td>
</tr>
<tr>
<td style="text-align:left">PickupDirectoryFromIis</td>
<td style="text-align:left">Email 复制到拾取目录，然后由本地Internet信息服务（IIS）传输</td>
</tr>
<tr>
<td style="text-align:left">SpecifiedPickupDirectory</td>
<td style="text-align:left">Email 复制到 SmtpClient.PickupDirectoryLocation 属性指定的目录，然后由外部应用传输</td>
</tr>
</tbody>
</table>
<p>Network 是正常发送的，一般使用这种方式。</p>
<p>测试的时候如果不希望邮件发送出去，只希望测试对于一些特殊情况有没有检测到，可以使用 SpecifiedPickupDirectory，这种方式的行为和 Network 是一致的，只是邮件没有发出去，而是存在一个文件夹中。</p>
<p>可以检测的特殊情况包括（就是 Send(MailMessage message) 方法的描述）：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//   T:System.ArgumentNullException:</span></div><div class="line"><span class="comment">//     message 为 null。</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//   T:System.InvalidOperationException:</span></div><div class="line"><span class="comment">//     有一个 Overload:System.Net.Mail.SmtpClient.SendAsync</span></div><div class="line"><span class="comment">//     调用正在进行。</span></div><div class="line"><span class="comment">//	   或 - From 为 null。</span></div><div class="line"><span class="comment">//     或 - To、CC、Bcc 中没有指定的收件人。</span></div><div class="line"><span class="comment">//     或 - DeliveryMethod 为 Network，但 Host 为 null 或空字符串。</span></div><div class="line"><span class="comment">//     或 - DeliveryMethod 为 Network，但 Port 为零、负数或大于 65,535。</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//   T:System.ObjectDisposedException:</span></div><div class="line"><span class="comment">//     此对象已被释放。</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//   T:System.Net.Mail.SmtpException:</span></div><div class="line"><span class="comment">//     连接到 SMTP 服务器失败。</span></div><div class="line"><span class="comment">//     或 - 身份验证失败。</span></div><div class="line"><span class="comment">//     或 - 操作超时。</span></div><div class="line"><span class="comment">//     或 - EnableSsl 为 true，但 DeliveryMethod 属性设置为 SpecifiedPickupDirectory 或 PickupDirectoryFromIis。</span></div><div class="line"><span class="comment">//     或 - EnableSsl 为 true,，但 SMTP 邮件服务器不在对 EHLO 命令的响应中公布 STARTTLS。</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//   T:System.Net.Mail.SmtpFailedRecipientsException:</span></div><div class="line"><span class="comment">//     message 未能传递给 To、CC 或 Bcc 中的一个或多个收件人。</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span>(<span class="params">MailMessage message</span>)</span>;</div></pre></td></tr></table></figure></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://baike.baidu.com/item/SMTP/175887?fr=aladdin" target="_blank" rel="external">百度百科：SMTP</a><br><a href="http://blog.csdn.net/kerry0071/article/details/28604267" target="_blank" rel="external">SMTP协议详解及工作过程</a><br><a href="https://msdn.microsoft.com/en-us/library/system.net.mail.smtpdeliverymethod(v=vs.110).aspx" target="_blank" rel="external">MSDN: SmtpDeliveryMethod Enumeration</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[组合数学]]></title>
      <url>http://yoursite.com/2017/06/09/math/</url>
      <content type="html"><![CDATA[<p>$$(A * B) \% C = ((A \% C) * (B \% C)) \% C$$<br>$$A ^ n \% C = ((A - A \% C) + A \% C) ^ n \% C = (A \% C) ^ n \% C$$<br>例：$87 ^ {100} \% 7 = 3 ^ {100} \% 7 = (3 ^ 6) ^ {16} * 3 ^ 4 \% 7 = 1 * 81 \% 7 = 4$</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[位运算]]></title>
      <url>http://yoursite.com/2017/06/05/bitop/</url>
      <content type="html"><![CDATA[<p>左移 m &lt;&lt; n 把m左移n位，最左边n位被丢弃，右边补0<br>右移 m &gt;&gt; n 把m右移n位，最右边n位被丢弃</p>
<h3 id="二进制中1的个数"><a href="#二进制中1的个数" class="headerlink" title="二进制中1的个数"></a>二进制中1的个数</h3><p>$$n = (n-1) &amp; n$$<br>执行多少次，就有多少个1.</p>
<h3 id="一条语句判断一个整数是不是2的整数次方"><a href="#一条语句判断一个整数是不是2的整数次方" class="headerlink" title="一条语句判断一个整数是不是2的整数次方"></a>一条语句判断一个整数是不是2的整数次方</h3><p>$$n &amp; (n-1) == 0$$</p>
<h3 id="比较两个整数m和n，计算需要改变m的二进制表示中的多少位才能得到n"><a href="#比较两个整数m和n，计算需要改变m的二进制表示中的多少位才能得到n" class="headerlink" title="比较两个整数m和n，计算需要改变m的二进制表示中的多少位才能得到n"></a>比较两个整数m和n，计算需要改变m的二进制表示中的多少位才能得到n</h3><p>$m\^n$(异或)，然后统计1的个数。</p>
<p>把一个整数减去1之后再和原来的整数做位与运算，得到的结果相当于把整数的二进制表示中的最右边一个1变成0</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[递归和循环]]></title>
      <url>http://yoursite.com/2017/06/05/recursion-looping/</url>
      <content type="html"><![CDATA[<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><p>代码简洁，但是效率不如循环：</p>
<ol>
<li>函数调用的时间、空间消耗，保存上下文</li>
<li>可能很多计算是重复的</li>
<li>调用栈溢出</li>
</ol>
<h1 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h1><p>$$f(n) = f(n-1) + f(n-2)$$<br>时间复杂度：<br>    递归：n的指数递增<br>    循环：O(n)<br>    公式法：O(logn) 矩阵</p>
<p>例子：</p>
<ol>
<li><p>跳台阶<br>第n级台阶看成n-1级+n-2级，$f(n) = f(n-1) + f(n-2)$<br>一次跳n级：$2^(n-1)$，$f(n) = f(0) + f(1) + … + f(n-1) = 2f(n-1) = 4f(n-2) = 2^(n-1)$</p>
</li>
<li><p>矩形覆盖</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[查找和排序]]></title>
      <url>http://yoursite.com/2017/06/05/searching-sorting/</url>
      <content type="html"><![CDATA[<h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><ol>
<li>顺序查找</li>
<li>二分查找（代码）</li>
<li>哈希表查找</li>
<li>二叉排序树查找<br>二分查找：在排序的数组（或部分排序的数组）中查找一个数字或统计某个数字出现的次数。<br>哈希表查找：优点：O(1)时间内查找，效率最高；缺点：需要额外空间实现哈希表。</li>
</ol>
<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><ol>
<li>插入排序</li>
<li>冒泡排序</li>
<li>归并排序</li>
<li>快速排序（代码）递归、非递归 总体的平均效率最好，但不是最优。<br>优劣、复杂度、场合、额外空间消耗、平均时间复杂度、最差时间复杂度</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构&算法整理目录]]></title>
      <url>http://yoursite.com/2017/04/25/Outline-data-structure-and-algorithms/</url>
      <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><ol>
<li>数组</li>
<li>链表<ul>
<li>反转链表，以k个元素为一组反转链表</li>
</ul>
</li>
<li>字符串<ul>
<li>KMP</li>
</ul>
</li>
<li>树<ul>
<li>创建树，插入结点</li>
<li>平衡二叉树</li>
</ul>
</li>
<li>图</li>
</ol>
<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><ol>
<li>查找</li>
<li>排序<ul>
<li>快排：数组，单链表</li>
<li>复杂度</li>
</ul>
</li>
<li>动态规划<ul>
<li>最长子序列</li>
<li>01背包</li>
</ul>
</li>
<li>贪心</li>
<li>数学<ul>
<li>素数</li>
<li>最大公约数</li>
<li>斐波那契数列</li>
<li>全排列</li>
</ul>
</li>
<li>位操作<ul>
<li>二进制1的个数</li>
</ul>
</li>
<li>递归</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[postName]]></title>
      <url>http://yoursite.com/2017/04/25/postName/</url>
      <content type="html"><![CDATA[<p>常用Markdown<br><a id="more"></a></p>
<p><strong>目录 (Table of Contents)</strong></p>
<p>[TOC]</p>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><ul>
<li>1</li>
<li>2</li>
<li>3</li>
</ul>
<ul>
<li>1</li>
<li>2</li>
<li>3</li>
</ul>
<h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><ol>
<li>1</li>
<li>2</li>
<li>3</li>
</ol>
<h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><blockquote>
<p>引用</p>
</blockquote>
<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p><a href="http://baidu.com" target="_blank" rel="external">Baidu</a></p>
<h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p><img src="http://mouapp.com/Mou_128.png" alt="Mou icon"></p>
<h4 id="粗体与斜体"><a href="#粗体与斜体" class="headerlink" title="粗体与斜体"></a>粗体与斜体</h4><p><strong>粗体</strong><br><em>斜体</em></p>
<h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><table>
<thead>
<tr>
<th>Tables</th>
<th style="text-align:center">Are</th>
<th style="text-align:right">Cool</th>
</tr>
</thead>
<tbody>
<tr>
<td>col 3 is</td>
<td style="text-align:center">right-aligned</td>
<td style="text-align:right">$1600</td>
</tr>
<tr>
<td>col 2 is</td>
<td style="text-align:center">centered</td>
<td style="text-align:right">$12</td>
</tr>
<tr>
<td>zebra stripes</td>
<td style="text-align:center">are neat</td>
<td style="text-align:right">$1</td>
</tr>
</tbody>
</table>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p><code>int a</code></p>
<h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4><hr>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://sspai.com/post/25137" target="_blank" rel="external">https://sspai.com/post/25137</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2017/01/08/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
